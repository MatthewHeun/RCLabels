% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractors.R
\name{get_prepositions}
\alias{get_prepositions}
\title{Extract prepositions from row and column labels}
\usage{
get_prepositions(
  labels,
  inf_notation = TRUE,
  notation = RCLabels::notations_list,
  choose_most_specific = FALSE,
  prepositions = RCLabels::prepositions_list
)
}
\arguments{
\item{labels}{The row and column labels from which prepositional phrases are to be extracted.}

\item{inf_notation}{A boolean that tells whether to infer notation for \code{x}.
Default is \code{TRUE}.
See \code{infer_notation()} for details.}

\item{notation}{The notation type to be used when extracting prepositions.
Default is \code{RCLabels::notations_list}, meaning that
the notation is inferred using \code{infer_notation()}.}

\item{choose_most_specific}{A boolean that tells whether to choose the most specific
notation from \code{notation} when inferring notation.
Default is \code{FALSE} so that a less specific notation can be
inferred.
In combination with \code{RCLabels::notations_list},
the default value of \code{FALSE} means that
\code{RCLabels::bracket_notation} will be selected instead of
anything more specific, such as
\code{RCLabels::from_notation}.}

\item{prepositions}{A vector of strings to be treated as prepositions.
Note that a space is appended to each word internally,
so, e.g., "to" becomes "to ".
Default is \code{RCLabels::prepositions_list}.}
}
\value{
A list of prepositions.
}
\description{
This function extracts prepositions from a list of row and column labels.
The list has outer structure of the number of labels and
an inner structure of each prepositional phrase in the specific label.
}
\details{
If labels are in the form of
\link{from_notation}, \link{to_notation} or similar,
it is probably best to give \link{bracket_notation} in the \code{notation}
argument.
Providing
\link{from_notation}, \link{to_notation} or similar
in the \code{notation} argument will lead to empty results.
The preposition is discarded when extracting the suffix,
yielding empty strings for the prepositions.
}
\examples{
get_prepositions(c("a [of b into c]", "d [-> e of f]"))
get_prepositions(c("a [of b]", "d [-> e of f]"),
                 inf_notation = FALSE,
                 notation = bracket_notation)
# Best to *not* specify notation by the preposition,
# as the result will be empty strings.
# Rather, give the notation as `bracket_notation`
# as shown above, or infer the notation
# as shown below.
get_prepositions(c("a [of b]", "d [-> e of f]"),
                 inf_notation = TRUE)
# The suffix is extracted, and the preposition
# is lost before looking for the preposition.
get_prepositions(c("a [of b]", "d [of f]"),
                 inf_notation = FALSE,
                 notation = of_notation)
}
